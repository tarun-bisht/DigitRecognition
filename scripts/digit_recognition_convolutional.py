# -*- coding: utf-8 -*-
'''WRITTEN BY : TARUN BISHT'''
"""Digit Recognition Convolutional.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z2_F_kHL-lEcujUaaAA4bQWlu1FYkv0Y
"""
#IMPORTS
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
#LOAD DATA
mnist=tf.keras.datasets.mnist
#SPLITTING DATA
(x_train,y_train),(x_test,y_test)=mnist.load_data()

#CHECKING FOR IMAGE CHANNELS. IS ALPHA CHANNEL IS AT FIRST OR LAST?
if tf.keras.backend.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, x_train.shape[1],x_train.shape[2])
    x_test = x_test.reshape(x_test.shape[0], 1, x_train.shape[1],x_train.shape[2])
    input_shape = (1, x_train.shape[1],x_train.shape[2])
else:
    x_train = x_train.reshape(x_train.shape[0], x_train.shape[1],x_train.shape[2], 1)
    x_test = x_test.reshape(x_test.shape[0], x_train.shape[1],x_train.shape[2], 1)
    input_shape = (x_train.shape[1],x_train.shape[2], 1)

#SHOWING FIRST 3 IMAGES FROM TRAINING SAMPLE
for i in range(3):
    plt.imshow(x_train[i].reshape(28,28))
    plt.show()

#FORMATTING DATA AND ENCODING LABELS
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train=x_train/255
x_test=x_test/255
y_train=tf.keras.utils.to_categorical(y_train,10)
y_test=tf.keras.utils.to_categorical(y_test,10)

#CREATING A SEQUENTIAL MODEL
model=tf.keras.models.Sequential()

#MODEL ARCHITECTURE
#INPUT NODES
model.add(tf.keras.layers.Conv2D(32,(5,5),input_shape=input_shape,activation=tf.nn.relu))
#HIDDEN NODES
model.add(tf.keras.layers.MaxPooling2D(pool_size=(3, 3)))
model.add(tf.keras.layers.Conv2D(32,(2,2),activation=tf.nn.relu))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128,activation=tf.nn.relu))
#OUTPUT NODES
model.add(tf.keras.layers.Dense(10,activation=tf.nn.softmax))
#COMPILATION
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
#TRAINING
model.fit(x_train,y_train,epochs=10)
#EVALUATE MODEL WITH TEST DATA
val_loss,val_acc=model.evaluate(x_test,y_test)
print(val_loss)
print(val_acc)

#PREDICING OUTPUT FROM TEST DATA
prediction=model.predict(x_test)
for i in range(10):
    plt.imshow(x_test[i].reshape(28,28))
    print(prediction[i])
    num=np.argmax(prediction[i])
    print(num)
    plt.show()